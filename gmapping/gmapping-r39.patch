Index: gridfastslam/gfs2neff.cpp
===================================================================
--- gridfastslam/gfs2neff.cpp	(revision 39)
+++ gridfastslam/gfs2neff.cpp	(working copy)
@@ -4,7 +4,7 @@
 
 using namespace std;
 
-int main(unsigned int argc, const char* const *argv){
+int main(int argc, const char* const *argv){
 	if (argc<3){
 		cout << "usage gfs2neff <infilename> <nefffilename>" << endl;
 		return -1;
Index: gridfastslam/gfsreader.cpp
===================================================================
--- gridfastslam/gfsreader.cpp	(revision 39)
+++ gridfastslam/gfsreader.cpp	(working copy)
@@ -1,6 +1,7 @@
 #include "gfsreader.h"
 #include <iomanip>
 #include <limits>
+#include <cstring>
 
 namespace  GMapping { 
 
Index: gridfastslam/gridslamprocessor.cpp
===================================================================
--- gridfastslam/gridslamprocessor.cpp	(revision 39)
+++ gridfastslam/gridslamprocessor.cpp	(working copy)
@@ -19,13 +19,16 @@
 
   GridSlamProcessor::GridSlamProcessor(): m_infoStream(cout){
     
+    period_ = 5.0;
     m_obsSigmaGain=1;
     m_resampleThreshold=0.5;
     m_minimumScore=0.;
   }
   
   GridSlamProcessor::GridSlamProcessor(const GridSlamProcessor& gsp) 
-    :m_particles(gsp.m_particles), m_infoStream(cout){
+    :last_update_time_(0.0), m_particles(gsp.m_particles), m_infoStream(cout){
+
+    period_ = 5.0;
     
     m_obsSigmaGain=gsp.m_obsSigmaGain;
     m_resampleThreshold=gsp.m_resampleThreshold;
@@ -85,6 +88,7 @@
   }
   
   GridSlamProcessor::GridSlamProcessor(std::ostream& infoS): m_infoStream(infoS){
+    period_ = 5.0;
     m_obsSigmaGain=1;
     m_resampleThreshold=0.5;
     m_minimumScore=0.;
@@ -146,7 +150,7 @@
   
   GridSlamProcessor::~GridSlamProcessor(){
     cerr << __PRETTY_FUNCTION__ << ": Start" << endl;
-    cerr << __PRETTY_FUNCTION__ << ": Deeting tree" << endl;
+    cerr << __PRETTY_FUNCTION__ << ": Deleting tree" << endl;
     for (std::vector<Particle>::iterator it=m_particles.begin(); it!=m_particles.end(); it++){
 #ifdef TREE_CONSISTENCY_CHECK		
       TNode* node=it->node;
@@ -374,10 +378,12 @@
     
     bool processed=false;
 
-    // process a scan only if the robot has traveled a given distance
+    // process a scan only if the robot has traveled a given distance or a certain amount of time has elapsed
     if (! m_count 
-	|| m_linearDistance>m_linearThresholdDistance 
-	|| m_angularDistance>m_angularThresholdDistance){
+	|| m_linearDistance>=m_linearThresholdDistance 
+	|| m_angularDistance>=m_angularThresholdDistance
+  || (period_ >= 0.0 && (reading.getTime() - last_update_time_) > period_)){
+      last_update_time_ = reading.getTime();
       
       if (m_outputStream.is_open()){
 	m_outputStream << setiosflags(ios::fixed) << setprecision(6);
@@ -402,6 +408,13 @@
 	plainReading[i]=reading[i];
       }
       m_infoStream << "m_count " << m_count << endl;
+
+      RangeReading* reading_copy = 
+              new RangeReading(reading.size(),
+                               &(reading[0]),
+                               static_cast<const RangeSensor*>(reading.getSensor()),
+                               reading.getTime());
+
       if (m_count>0){
 	scanMatch(plainReading);
 	if (m_outputStream.is_open()){
@@ -432,7 +445,7 @@
 	  m_outputStream << setiosflags(ios::fixed) << setprecision(6);
 	  m_outputStream << "NEFF " << m_neff << endl;
 	}
-	resample(plainReading, adaptParticles);
+	resample(plainReading, adaptParticles, reading_copy);
 	
       } else {
 	m_infoStream << "Registering First Scan"<< endl;
@@ -443,9 +456,9 @@
 	  
 	  // cyr: not needed anymore, particles refer to the root in the beginning!
 	  TNode* node=new	TNode(it->pose, 0., it->node,  0);
-	  node->reading=0;
+	  //node->reading=0;
+          node->reading = reading_copy;
 	  it->node=node;
-	  
 	}
       }
       //		cerr  << "Tree: normalizing, resetting and propagating weights at the end..." ;
Index: gridfastslam/gfs2log.cpp
===================================================================
--- gridfastslam/gfs2log.cpp	(revision 39)
+++ gridfastslam/gfs2log.cpp	(working copy)
@@ -3,6 +3,7 @@
 #include <sstream>
 #include <vector>
 #include <list>
+#include <cstring>
 #include <utils/point.h>
 #include "gfsreader.h"
 
@@ -12,7 +13,7 @@
 using namespace GMapping;
 using namespace GMapping::GFSReader;
 
-int main (unsigned int argc, const char * const * argv){
+int main (int argc, const char * const * argv){
 	if (argc<3){
 		cout << "usage gfs2log [-err] [-neff] [-part] [-odom] <infilename> <outfilename>" << endl;
 		cout << "  -odom : dump raw odometry in ODOM message instead of inpolated corrected one" << endl;
Index: gridfastslam/gridslamprocessor.h
===================================================================
--- gridfastslam/gridslamprocessor.h	(revision 39)
+++ gridfastslam/gridslamprocessor.h	(working copy)
@@ -148,6 +148,7 @@
 			       int iterations, double likelihoodSigma=1, double likelihoodGain=1, unsigned int likelihoodSkip=0);
     void setMotionModelParameters(double srr, double srt, double str, double stt);
     void setUpdateDistances(double linear, double angular, double resampleThreshold);
+    void setUpdatePeriod(double p) {period_=p;}
     
     //the "core" algorithm
     void processTruePos(const OdometryReading& odometry);
@@ -176,7 +177,7 @@
     virtual void onOdometryUpdate();
     virtual void onResampleUpdate();
     virtual void onScanmatchUpdate();
-	
+
     //accessor methods
     /**the maxrange of the laser to consider */
     MEMBER_PARAM_SET_GET(m_matcher, double, laserMaxRange, protected, public, public);
@@ -248,6 +249,9 @@
  
     /**the laser beams*/
     unsigned int m_beams;
+    double last_update_time_;
+    double period_;
+	
     
     
     /**the particles*/
Index: gridfastslam/gridslamprocessor.hxx
===================================================================
--- gridfastslam/gridslamprocessor.hxx	(revision 39)
+++ gridfastslam/gridslamprocessor.hxx	(working copy)
@@ -67,7 +67,7 @@
   
 }
 
-inline bool GridSlamProcessor::resample(const double* plainReading, int adaptSize, const RangeReading* ){
+inline bool GridSlamProcessor::resample(const double* plainReading, int adaptSize, const RangeReading* reading){
   
   bool hasResampled = false;
   
@@ -112,7 +112,7 @@
       TNode* oldNode=oldGeneration[m_indexes[i]];
       //			cerr << i << "->" << m_indexes[i] << "B("<<oldNode->childs <<") ";
       node=new	TNode(p.pose, 0, oldNode, 0);
-      node->reading=0;
+      node->reading=reading;
       //			cerr << "A("<<node->parent->childs <<") " <<endl;
       
       temp.push_back(p);
@@ -155,7 +155,8 @@
       TNode* node=0;
       node=new TNode(it->pose, 0.0, *node_it, 0);
       
-      node->reading=0;
+      //node->reading=0;
+      node->reading=reading;
       it->node=node;
 
       //END: BUILDING TREE
Index: gridfastslam/gfs2rec.cpp
===================================================================
--- gridfastslam/gfs2rec.cpp	(revision 39)
+++ gridfastslam/gfs2rec.cpp	(working copy)
@@ -3,6 +3,7 @@
 #include <sstream>
 #include <vector>
 #include <list>
+#include <cstring>
 #include <utils/point.h>
 
 #define MAX_LINE_LENGHT (1000000)
@@ -368,7 +369,7 @@
 
 
 
-int main (unsigned int argc, const char * const * argv){
+int main ( int argc, const char * const * argv){
 	if (argc<3){
 		cout << "usage gfs2rec [-err] <infilename> <outfilename>" << endl;
 		return -1;
Index: log/log_plot.cpp
===================================================================
--- log/log_plot.cpp	(revision 39)
+++ log/log_plot.cpp	(working copy)
@@ -1,5 +1,6 @@
 #include <fstream>
 #include <iostream>
+#include <cstdlib>
 #include <sys/types.h>
 #include <log/carmenconfiguration.h>
 #include <log/sensorlog.h>
@@ -8,7 +9,7 @@
 using namespace std;
 using namespace GMapping;
 
-int main(char argc, char ** argv){
+int main(int argc, char ** argv){
   double maxrange=2.;
 	if (argc<2){
 		cout << "usage log_plot <filename> | gnuplot" << endl;
Index: log/log_test.cpp
===================================================================
--- log/log_test.cpp	(revision 39)
+++ log/log_test.cpp	(working copy)
@@ -1,5 +1,6 @@
 #include <fstream>
 #include <iostream>
+#include <cstdlib>
 #include <log/carmenconfiguration.h>
 #include <log/sensorlog.h>
 
@@ -7,7 +8,7 @@
 using namespace std;
 using namespace GMapping;
 
-int main(char argc, char ** argv){
+int main(int argc, char ** argv){
 	if (argc<2){
 		cout << "usage log_test <filename>" << endl;
 		exit (-1);
Index: log/scanstudio2carmen.cpp
===================================================================
--- log/scanstudio2carmen.cpp	(revision 39)
+++ log/scanstudio2carmen.cpp	(working copy)
@@ -1,6 +1,7 @@
 #include <iostream>
 #include <fstream>
 #include <sstream>
+#include <cstdlib>
 #include <assert.h>
 #include <utils/point.h>
 
Index: log/rdk2carmen.cpp
===================================================================
--- log/rdk2carmen.cpp	(revision 39)
+++ log/rdk2carmen.cpp	(working copy)
@@ -1,5 +1,6 @@
 #include <fstream>
 #include <iostream>
+#include <cstdlib>
 #include <log/carmenconfiguration.h>
 #include <log/sensorlog.h>
 
@@ -7,7 +8,7 @@
 using namespace std;
 using namespace GMapping;
 
-int main(char argc, char ** argv){
+int main(int argc, char ** argv){
 	if (argc<2){
 		cerr << "usage "<<argv[0]<<" <filename> <outfilename>" << endl;
 		cerr << "or "<<argv[0]<<" <filename> for standard output" << endl;
Index: log/carmenconfiguration.cpp
===================================================================
--- log/carmenconfiguration.cpp	(revision 39)
+++ log/carmenconfiguration.cpp	(working copy)
@@ -2,6 +2,7 @@
 #include <iostream>
 #include <sstream>
 #include <assert.h>
+#include <cstdlib>
 #include <sys/types.h>
 #include <sensor_odometry/odometrysensor.h>
 #include <sensor_range/rangesensor.h>
Index: gui/gfs2img.cpp
===================================================================
--- gui/gfs2img.cpp	(revision 39)
+++ gui/gfs2img.cpp	(working copy)
@@ -1,4 +1,5 @@
 #include <limits.h>
+#include <cstdlib>
 #include <scanmatcher/scanmatcher.h>
 #include <gridfastslam/gfsreader.h>
 #include <qpixmap.h>
Index: grid/harray2d.h
===================================================================
--- grid/harray2d.h	(revision 39)
+++ grid/harray2d.h	(working copy)
@@ -137,10 +137,12 @@
 template <class Cell>
 AccessibilityState  HierarchicalArray2D<Cell>::cellState(int x, int y) const {
 	if (this->isInside(patchIndexes(x,y)))
+        {
 		if(isAllocated(x,y))
 			return (AccessibilityState)((int)Inside|(int)Allocated);
 		else
 			return Inside;
+        }
 	return Outside;
 }
 
Index: scanmatcher/scanmatch_test.cpp
===================================================================
--- scanmatcher/scanmatch_test.cpp	(revision 39)
+++ scanmatcher/scanmatch_test.cpp	(working copy)
@@ -1,4 +1,5 @@
 
+#include <cstdlib>
 #include <fstream>
 #include <iostream>
 #include <log/carmenconfiguration.h>
Index: scanmatcher/icptest.cpp
===================================================================
--- scanmatcher/icptest.cpp	(revision 39)
+++ scanmatcher/icptest.cpp	(working copy)
@@ -1,5 +1,6 @@
 #include <iostream>
 #include <fstream>
+#include <cstdlib>
 
 #include <list>
 #include "icp.h"
Index: scanmatcher/gridlinetraversal.h
===================================================================
--- scanmatcher/gridlinetraversal.h	(revision 39)
+++ scanmatcher/gridlinetraversal.h	(working copy)
@@ -1,6 +1,7 @@
 #ifndef GRIDLINETRAVERSAL_H
 #define GRIDLINETRAVERSAL_H
 
+#include <cstdlib>
 #include <utils/point.h>
 
 namespace GMapping {
Index: scanmatcher/scanmatcher.cpp
===================================================================
--- scanmatcher/scanmatcher.cpp	(revision 39)
+++ scanmatcher/scanmatcher.cpp	(working copy)
@@ -1,5 +1,7 @@
 #include <list>
 #include <iostream>
+#include <cstring>
+#include <limits>
 
 #include "scanmatcher.h"
 #include "gridlinetraversal.h"
@@ -44,8 +46,14 @@
 	m_lasamplestep=0.01;
 	m_generateMap=false;
 */
+
+	m_linePoints = new IntPoint[20000];
 }
 
+ScanMatcher::~ScanMatcher(){
+	delete [] m_linePoints;
+}
+
 void ScanMatcher::invalidateActiveArea(){
 	m_activeAreaComputed=false;
 }
@@ -125,7 +133,7 @@
 	/*determine the size of the area*/
 	const double * angle=m_laserAngles+m_initialBeamsSkip;
 	for (const double* r=readings+m_initialBeamsSkip; r<readings+m_laserBeams; r++, angle++){
-		if (*r>m_laserMaxRange) continue;
+		if (*r>m_laserMaxRange||*r==0.0) continue;
 		double d=*r>m_usableRange?m_usableRange:*r;
 		Point phit=lp;
 		phit.x+=d*cos(lp.theta+*angle);
@@ -157,22 +165,21 @@
 	for (const double* r=readings+m_initialBeamsSkip; r<readings+m_laserBeams; r++, angle++)
 		if (m_generateMap){
 			double d=*r;
-			if (d>m_laserMaxRange)
+			if (d>m_laserMaxRange||d==0.0)
 				continue;
 			if (d>m_usableRange)
 				d=m_usableRange;
 			Point phit=lp+Point(d*cos(lp.theta+*angle),d*sin(lp.theta+*angle));
 			IntPoint p0=map.world2map(lp);
 			IntPoint p1=map.world2map(phit);
-			
-			IntPoint linePoints[20000] ;
+
 			GridLineTraversalLine line;
-			line.points=linePoints;
+			line.points=m_linePoints;
 			GridLineTraversal::gridLine(p0, p1, &line);
 			for (int i=0; i<line.num_points-1; i++){
-				assert(map.isInside(linePoints[i]));
-				activeArea.insert(map.storage().patchIndexes(linePoints[i]));
-				assert(linePoints[i].x>=0 && linePoints[i].y>=0);
+				assert(map.isInside(m_linePoints[i]));
+				activeArea.insert(map.storage().patchIndexes(m_linePoints[i]));
+				assert(m_linePoints[i].x>=0 && m_linePoints[i].y>=0);
 			}
 			if (d<m_usableRange){
 				IntPoint cp=map.storage().patchIndexes(p1);
@@ -180,7 +187,7 @@
 				activeArea.insert(cp);
 			}
 		} else {
-			if (*r>m_laserMaxRange||*r>m_usableRange) continue;
+			if (*r>m_laserMaxRange||*r>m_usableRange||*r==0.0) continue;
 			Point phit=lp;
 			phit.x+=*r*cos(lp.theta+*angle);
 			phit.y+=*r*sin(lp.theta+*angle);
@@ -223,15 +230,14 @@
 	for (const double* r=readings+m_initialBeamsSkip; r<readings+m_laserBeams; r++, angle++)
 		if (m_generateMap){
 			double d=*r;
-			if (d>m_laserMaxRange)
+			if (d>m_laserMaxRange||d==0.0)
 				continue;
 			if (d>m_usableRange)
 				d=m_usableRange;
 			Point phit=lp+Point(d*cos(lp.theta+*angle),d*sin(lp.theta+*angle));
 			IntPoint p1=map.world2map(phit);
-			IntPoint linePoints[20000] ;
 			GridLineTraversalLine line;
-			line.points=linePoints;
+			line.points=m_linePoints;
 			GridLineTraversal::gridLine(p0, p1, &line);
 			for (int i=0; i<line.num_points-1; i++){
 				PointAccumulator& cell=map.cell(line.points[i]);
@@ -247,7 +253,7 @@
 				esum+=e;
 			}
 		} else {
-			if (*r>m_laserMaxRange||*r>m_usableRange) continue;
+			if (*r>m_laserMaxRange||*r>m_usableRange||*r==0.0) continue;
 			Point phit=lp;
 			phit.x+=*r*cos(lp.theta+*angle);
 			phit.y+=*r*sin(lp.theta+*angle);
Index: scanmatcher/scanmatcher.h
===================================================================
--- scanmatcher/scanmatcher.h	(revision 39)
+++ scanmatcher/scanmatcher.h	(working copy)
@@ -7,7 +7,7 @@
 #include <utils/stat.h>
 #include <iostream>
 #include <utils/gvalues.h>
-#define LASER_MAXBEAMS 1024
+#define LASER_MAXBEAMS 2048
 
 namespace GMapping {
 
@@ -16,6 +16,7 @@
 		typedef Covariance3 CovarianceMatrix;
 		
 		ScanMatcher();
+		~ScanMatcher();
 		double icpOptimize(OrientedPoint& pnew, const ScanMatcherMap& map, const OrientedPoint& p, const double* readings) const;
 		double optimize(OrientedPoint& pnew, const ScanMatcherMap& map, const OrientedPoint& p, const double* readings) const;
 		double optimize(OrientedPoint& mean, CovarianceMatrix& cov, const ScanMatcherMap& map, const OrientedPoint& p, const double* readings) const;
@@ -44,6 +45,7 @@
 		/**laser parameters*/
 		unsigned int m_laserBeams;
 		double       m_laserAngles[LASER_MAXBEAMS];
+		
 		//OrientedPoint m_laserPose;
 		PARAM_SET_GET(OrientedPoint, laserPose, protected, public, public)
 		PARAM_SET_GET(double, laserMaxRange, protected, public, public)
@@ -67,6 +69,9 @@
 		PARAM_SET_GET(double, linearOdometryReliability, protected, public, public)
 		PARAM_SET_GET(double, freeCellRatio, protected, public, public)
 		PARAM_SET_GET(unsigned int, initialBeamsSkip, protected, public, public)
+
+		// allocate this large array only once
+		IntPoint* m_linePoints;
 };
 
 inline double ScanMatcher::icpStep(OrientedPoint & pret, const ScanMatcherMap& map, const OrientedPoint& p, const double* readings) const{
@@ -82,8 +87,7 @@
 	for (const double* r=readings+m_initialBeamsSkip; r<readings+m_laserBeams; r++, angle++){
 		skip++;
 		skip=skip>m_likelihoodSkip?0:skip;
-		if (*r>m_usableRange) continue;
-		if (skip) continue;
+		if (skip||*r>m_usableRange||*r==0.0) continue;
 		Point phit=lp;
 		phit.x+=*r*cos(lp.theta+*angle);
 		phit.y+=*r*sin(lp.theta+*angle);
@@ -148,8 +152,7 @@
 	for (const double* r=readings+m_initialBeamsSkip; r<readings+m_laserBeams; r++, angle++){
 		skip++;
 		skip=skip>m_likelihoodSkip?0:skip;
-		if (*r>m_usableRange) continue;
-		if (skip) continue;
+		if (skip||*r>m_usableRange||*r==0.0) continue;
 		Point phit=lp;
 		phit.x+=*r*cos(lp.theta+*angle);
 		phit.y+=*r*sin(lp.theta+*angle);
Index: configfile/configfile_test.cpp
===================================================================
--- configfile/configfile_test.cpp	(revision 39)
+++ configfile/configfile_test.cpp	(working copy)
@@ -23,6 +23,7 @@
 
 
 #include <iostream>
+#include <cstdlib>
 #include "configfile.h"
 
 using namespace std;
Index: configfile/configfile.cpp
===================================================================
--- configfile/configfile.cpp	(revision 39)
+++ configfile/configfile.cpp	(working copy)
@@ -30,6 +30,7 @@
 #include <sstream>
 #include <iostream>
 #include <ctype.h>
+#include <cstdlib>
 
 namespace GMapping{
 using namespace std;
Index: particlefilter/particlefilter.h
===================================================================
--- particlefilter/particlefilter.h	(revision 39)
+++ particlefilter/particlefilter.h	(working copy)
@@ -1,6 +1,7 @@
 #ifndef PARTICLEFILTER_H
 #define PARTICLEFILTER_H
 #include <stdlib.h>
+#include <float.h>
 #include <sys/types.h>
 #include<vector>
 #include<utility>
@@ -23,7 +24,8 @@
 template <class OutputIterator, class Iterator>
 double toNormalForm(OutputIterator& out, const Iterator & begin, const Iterator & end){
 	//determine the maximum
-	double lmax=-MAXDOUBLE;
+	//double lmax=-MAXDOUBLE;
+	double lmax=-DBL_MAX;
 	for (Iterator it=begin; it!=end; it++){
 		lmax=lmax>((double)(*it))? lmax: (double)(*it);
 	}
Index: sensor/sensor_range/rangereading.cpp
===================================================================
--- sensor/sensor_range/rangereading.cpp	(revision 39)
+++ sensor/sensor_range/rangereading.cpp	(working copy)
@@ -1,3 +1,4 @@
+#include <limits>
 #include <iostream>
 #include <assert.h>
 #include <sys/types.h>
Index: Makefile
===================================================================
--- Makefile	(revision 39)
+++ Makefile	(working copy)
@@ -6,7 +6,8 @@
 ifeq ($(MACOSX),1)
 SUBDIRS=utils sensor log configfile scanmatcher gridfastslam 
 else
-SUBDIRS=utils sensor log configfile scanmatcher gridfastslam gui 
+#SUBDIRS=utils sensor log configfile scanmatcher gridfastslam gui 
+SUBDIRS=utils sensor log configfile scanmatcher gridfastslam
 endif
 endif
 
